import asyncio
import os
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, FSInputFile
from config import TOKEN  # –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω –∏–∑ —Ñ–∞–π–ª–∞ config
from gtts import gTTS  # Google TTS –¥–ª—è –æ–∑–≤—É—á–∫–∏ —Ç–µ–∫—Å—Ç–∞
from googletrans import Translator  # –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞

bot = Bot(token=TOKEN)
dp = Dispatcher()
translator = Translator()

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ç–∞–ª–æ–≥–∞ –¥–ª—è –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
if not os.path.exists("audio"):
    os.makedirs("audio")

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
@dp.message(F.text)
async def translate_text(message: Message):
    try:
        original_text = message.text
        translated_text = translator.translate(original_text, dest='en').text  # –ü–µ—Ä–µ–≤–æ–¥–∏–º —Ç–µ–∫—Å—Ç –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞—É–¥–∏–æ—Ñ–∞–π–ª —Å –ø–µ—Ä–µ–≤–æ–¥–æ–º
        audio_path = "audio/translated.ogg"
        tts = gTTS(translated_text, lang="en")
        tts.save(audio_path)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –ø–µ—Ä–µ–≤–æ–¥–∞
        await message.answer(f"üî† –ü–µ—Ä–µ–≤–æ–¥: {translated_text}")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        voice_file = FSInputFile(audio_path)
        await bot.send_voice(message.chat.id, voice=voice_file)

    except Exception as e:
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: {e}")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())